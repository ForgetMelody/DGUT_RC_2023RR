#!/usr/bin/env python
PACKAGE = "dynamic_yaw"
 
from dynamic_reconfigure.parameter_generator_catkin import *
 
 
gen = ParameterGenerator()
 
 
gen.add("search_radius", double_t, 0.0 , "the point cloud search radius", 0.30 , 0.0, 1.0)  #默认值 最小值 最大值 # 匹配点云的限制距离
gen.add("limit_yaw",     double_t, 0.0 , "the range of is or not inherit the last yaw",  0.01, 0.0, 0.5)  #当我们的yaw差的值小于这个数就继承上一次的yaw
gen.add("compensation",  double_t, 0.0 ,  "the offsets of the distance", 0.05, 0.0, 0.5)  #对于距离上的补偿
gen.add("aim_distance",  double_t, 0.0 , "the range of the way of selecting point", 1.80, 0.0, 3.0)  #点云识别方法的阈值
gen.add("yaw_diff_long", double_t, 0.0 , "the offsets of the fast pillar", 0.50, -3.14, 3.14)  #对于偏航的补偿
gen.add("yaw_diff_short",double_t, 0.0 , "the offsets of the near pillar", 1.20, -3.14, 3.14)  #对于偏航的补偿
gen.add("y_offsets",     double_t, 0.0 , "the offsets of the y", 0.01, 0.0 ,1.0)  #对于点云点的y轴补偿
gen.add("tolerate_yaw",  double_t, 0.0 , "the tolerance of the yaw", 0.02, -3.14, 3.14)  #对于偏航的tolerate
gen.add("yaw_offsets_k",  double_t, 0.0 , "the slope of the yaw_offsets", -0.0028, -1.0, 1.0)  #线性补偿的k
gen.add("yaw_offsets_b",  double_t, 0.0 , "the intercept of the yaw_offsets", -0.001, -4.0, 4.0)  #线性补偿的b

# min=0.0,     max=1.0,    default = 0.30, step = 0.01
# min = 0.0,   max = 0.5,  default = 0.01, step = 0.01
# min = 0.0,   max = 0.5,  default = 0.30, step = 0.01
# min = 0.0,   max = 3.0,  default = 0.30, step = 0.1
# min = -3.14, max = 3.14, default = 0.30, step = 0.01
# min = -3.14, max = 3.14, default = 0.30, step = 0.01
# min = 0.0,   max = 1.0,  default = 0.30, step = 0.01
# min =- 3.14, max = 3.14, default = 0.30, step = 0.01

# name：参数名，使用字符串描述；
# type：定义参数的类型，可以是int_t, double_t, str_t, 或者bool_t；
# level：需要传入参数动态配置回调函数中的掩码，在回调函数中会修改所有参数的掩码，表示参数已经进行修改；
# description：描述参数作用的字符串；
# default：设置参数的默认值；
# min：可选，设置参数的最小值，对于字符串和布尔类型值不生效；
# max：可选，设置参数的最大值，对于字符串和布尔类型值不生效；
 
# 这种方法可以生成一个参数值，也可以使用如下方法生成一个枚举类型的值：
 
# size_enum = gen.enum([ gen.const("Small",      int_t, 0, "A small constant"),
#                        gen.const("Medium",     int_t, 1, "A medium constant"),
#                        gen.const("Large",      int_t, 2, "A large constant"),
#                        gen.const("ExtraLarge", int_t, 3, "An extra large constant")],
#                      "An enum to set size")
#  
# gen.add("size", int_t, 0, "A size parameter which is edited via an enum", 1, 0, 3, edit_method=size_enum)
 
# 最后一个参数是生成的动态参数头文件名字，如这里生成的应是testConfig.h
exit(gen.generate(PACKAGE, "dynamic_yaw", "yawConfig"))
